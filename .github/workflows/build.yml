# SPDX-FileCopyrightText: 2022 Jakub Wasylk√≥w <kuba_160@protonmail.com>
# SPDX-License-Identifier: CC0-1.0

name: ddb_discord_presence plugin build

on: [push,pull_request]

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Get sha_short
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Download DeaDBeeF header
      run: wget https://raw.githubusercontent.com/DeaDBeeF-Player/deadbeef/1.8/deadbeef.h && mkdir deadbeef && mv deadbeef.h deadbeef/
    - name: Update submodules
      run: git submodule update --init
    - name: Build ddb_discord_presence
      run: make && mkdir binary && make install PREFIX=./binary
    - name: Build ddb_discord_presence with debugging symbols
      run: make clean && make DEBUG=1 && mkdir binary_debug && make install PREFIX=./binary_debug
    - name: Upload artifact linux-${{ steps.vars.outputs.sha_short }}.zip
      uses: actions/upload-artifact@v3
      if: ${{ !env.ACT }}
      with:
        name: linux-${{ steps.vars.outputs.sha_short }}
        path: ./binary
    - name: Upload artifact linux-debug-${{ steps.vars.outputs.sha_short }}.zip
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v3
      with:
        name: linux-debug-${{ steps.vars.outputs.sha_short }}
        path: ./binary_debug

  build_windows:
    name: Windows
    runs-on: windows-latest
    steps:
     - name: Checkout repository
       uses: actions/checkout@v1
     - name: Get sha_short
       id: vars
       run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
     - name: Install msys2
       uses: msys2/setup-msys2@v2
       with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc wget make git patch tar
     - name: Download DeaDBeeF header
       shell: msys2 {0}
       run: wget https://raw.githubusercontent.com/DeaDBeeF-Player/deadbeef/1.8/deadbeef.h && mkdir deadbeef && mv deadbeef.h deadbeef/
     - name: Update submodules
       shell: msys2 {0}
       run: git submodule update --init
     - name: Build ddb_discord_presence
       shell: msys2 {0}
       run: make && mkdir binary && make install PREFIX=./binary
     - name: Build ddb_discord_presence with debugging symbols
       shell: msys2 {0}
       run: make clean && make DEBUG=1 CC=gcc && mkdir binary_debug && make install PREFIX=./binary_debug
     - name: Upload artifact windows-${{ steps.vars.outputs.sha_short }}.zip
       uses: actions/upload-artifact@v3
       with:
         name: windows-${{ steps.vars.outputs.sha_short }}
         path: ./binary
     - name: Upload artifact windows-debug-${{ steps.vars.outputs.sha_short }}.zip
       uses: actions/upload-artifact@v3
       with:
         name: windows-debug-${{ steps.vars.outputs.sha_short }}
         path: ./binary_debug

  build_macos:
    name: macOS
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Get sha_short
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Download DeaDBeeF header
      run: wget https://raw.githubusercontent.com/DeaDBeeF-Player/deadbeef/1.8/deadbeef.h && mkdir deadbeef && mv deadbeef.h deadbeef/
    - name: Update submodules
      run: git submodule update --init && mkdir binary binary/x86_64 binary/arm64 && mkdir binary_debug binary_debug/x86_64 binary_debug/arm64
    - name: Build discord_presence (arm64)
      run: CFLAGS="-target arm64-apple-macos11" CXXFLAGS="-target arm64-apple-macos11" make && make install PREFIX=./binary/arm64
    - name: Build discord_presence (x86_64)
      run: make clean && CFLAGS="-target x86_64-apple-macos10.12" CXXFLAGS="-target x86_64-apple-macos10.12" make && make install PREFIX=./binary/x86_64
    - name: Combine both archs
      run: lipo -create -output binary/discord_presence.dylib binary/arm64/discord_presence.dylib binary/x86_64/discord_presence.dylib && rm -r binary/x86_64 binary/arm64

    - name: Build discord_presence with debugging symbols (arm64)
      run: make clean && CFLAGS="-target arm64-apple-macos11" CXXFLAGS="-target arm64-apple-macos11" make DEBUG=1 && make install PREFIX=./binary_debug/arm64
    - name: Build discord_presence with debugging symbols (x86_64)
      run: make clean && CFLAGS="-target x86_64-apple-macos10.12" CXXFLAGS="-target x86_64-apple-macos10.12" make DEBUG=1 && make install PREFIX=./binary_debug/x86_64
    - name: Combine both archs with debugging symbols
      run: lipo -create -output binary_debug/discord_presence.dylib binary_debug/arm64/discord_presence.dylib binary_debug/x86_64/discord_presence.dylib && rm -r binary_debug/x86_64 binary_debug/arm64
    - name: Upload artifact macos-${{ steps.vars.outputs.sha_short }}.zip
      uses: actions/upload-artifact@v3
      if: ${{ !env.ACT }}
      with:
        name: macos-${{ steps.vars.outputs.sha_short }}
        path: ./binary
    - name: Upload artifact macos-debug-${{ steps.vars.outputs.sha_short }}.zip
      uses: actions/upload-artifact@v3
      if: ${{ !env.ACT }}
      with:
        name: macos-debug-${{ steps.vars.outputs.sha_short }}
        path: ./binary_debug
